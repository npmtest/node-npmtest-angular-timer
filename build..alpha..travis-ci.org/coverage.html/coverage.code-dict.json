{"/home/travis/build/npmtest/node-npmtest-angular-timer/test.js":"/* istanbul instrument in package npmtest_angular_timer */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-angular-timer/lib.npmtest_angular_timer.js":"/* istanbul instrument in package npmtest_angular_timer */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_angular_timer = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_angular_timer = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-angular-timer/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-angular-timer && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_angular_timer */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_angular_timer\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_angular_timer.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_angular_timer.rollup.js'] =\n            local.assetsDict['/assets.npmtest_angular_timer.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_angular_timer.__dirname + '/lib.npmtest_angular_timer.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-angular-timer/node_modules/angular-timer/dist/angular-timer.js":"/**\n * angular-timer - v1.3.5 - 2017-03-09 2:18 PM\n * https://github.com/siddii/angular-timer\n *\n * Copyright (c) 2017 Adrian Wardell\n * Licensed MIT <https://github.com/siddii/angular-timer/blob/master/LICENSE.txt>\n */\nvar timerModule = angular.module('timer', [])\n  .directive('timer', ['$compile', function ($compile) {\n    return  {\n      restrict: 'EA',\n      replace: false,\n      scope: {\n        interval: '=interval',\n        startTimeAttr: '=startTime',\n        endTimeAttr: '=endTime',\n        countdownattr: '=countdown',\n        finishCallback: '&finishCallback',\n        autoStart: '&autoStart',\n        language: '@?',\n        fallback: '@?',\n        maxTimeUnit: '=',\n        seconds: '=?',\n        minutes: '=?',\n        hours: '=?',\n        days: '=?',\n        months: '=?',\n        years: '=?',\n        secondsS: '=?',\n        minutesS: '=?',\n        hoursS: '=?',\n        daysS: '=?',\n        monthsS: '=?',\n        yearsS: '=?'\n      },\n      controller: ['$scope', '$element', '$attrs', '$timeout', 'I18nService', '$interpolate', 'progressBarService', function ($scope, $element, $attrs, $timeout, I18nService, $interpolate, progressBarService) {\n\n        // Checking for trim function since IE8 doesn't have it\n        // If not a function, create tirm with RegEx to mimic native trim\n        if (typeof String.prototype.trim !== 'function') {\n          String.prototype.trim = function () {\n            return this.replace(/^\\s+|\\s+$/g, '');\n          };\n        }\n\n        //angular 1.2 doesn't support attributes ending in \"-start\", so we're\n        //supporting both \"autostart\" and \"auto-start\" as a solution for\n        //backward and forward compatibility.\n        $scope.autoStart = $attrs.autoStart || $attrs.autostart;\n\n\n        $scope.language = $scope.language || 'en';\n        $scope.fallback = $scope.fallback || 'en';\n\n        //allow to change the language of the directive while already launched\n        $scope.$watch('language', function(newVal, oldVal) {\n          if(newVal !== undefined) {\n            i18nService.init(newVal, $scope.fallback);\n          }\n        });\n\n        //init momentJS i18n, default english\n        var i18nService = new I18nService();\n        i18nService.init($scope.language, $scope.fallback);\n\n        //progress bar\n        $scope.displayProgressBar = 0;\n        $scope.displayProgressActive = 'active'; //Bootstrap active effect for progress bar\n\n        if ($element.html().trim().length === 0) {\n          $element.append($compile('<span>' + $interpolate.startSymbol() + 'millis' + $interpolate.endSymbol() + '</span>')($scope));\n        } else {\n          $element.append($compile($element.contents())($scope));\n        }\n\n        $scope.startTime = null;\n        $scope.endTime = null;\n        $scope.timeoutId = null;\n        $scope.countdown = angular.isNumber($scope.countdownattr) && parseInt($scope.countdownattr, 10) >= 0 ? parseInt($scope.countdownattr, 10) : undefined;\n        $scope.isRunning = false;\n\n        $scope.$on('timer-start', function () {\n          $scope.start();\n        });\n\n        $scope.$on('timer-resume', function () {\n          $scope.resume();\n        });\n\n        $scope.$on('timer-stop', function () {\n          $scope.stop();\n        });\n\n        $scope.$on('timer-clear', function () {\n          $scope.clear();\n        });\n\n        $scope.$on('timer-reset', function () {\n          $scope.reset();\n        });\n\n        $scope.$on('timer-set-countdown', function (e, countdown) {\n          $scope.countdown = countdown;\n        });\n\n        function resetTimeout() {\n          if ($scope.timeoutId) {\n            clearTimeout($scope.timeoutId);\n          }\n        }\n\n        $scope.$watch('startTimeAttr', function(newValue, oldValue) {\n          if (newValue !== oldValue && $scope.isRunning) {\n            $scope.start();\n          }\n        });\n\n        $scope.$watch('endTimeAttr', function(newValue, oldValue) {\n          if (newValue !== oldValue && $scope.isRunning) {\n            $scope.start();\n          }\n        });\n\n        $scope.start = function () {\n          $scope.startTime = $scope.startTimeAttr ? moment($scope.startTimeAttr) : moment();\n          $scope.endTime = $scope.endTimeAttr ? moment($scope.endTimeAttr) : null;\n          if (!angular.isNumber($scope.countdown)) {\n            $scope.countdown = angular.isNumber($scope.countdownattr) && parseInt($scope.countdownattr, 10) > 0 ? parseInt($scope.countdownattr, 10) : undefined;\n          }\n          resetTimeout();\n          tick();\n          $scope.isRunning = true;\n          $scope.$emit('timer-started', {\n            timeoutId: $scope.timeoutId,\n            millis: $scope.millis,\n            seconds: $scope.seconds,\n            minutes: $scope.minutes,\n            hours: $scope.hours,\n            days: $scope.days\n          });\n        };\n\n        $scope.resume = function () {\n          resetTimeout();\n          if ($scope.countdownattr) {\n            $scope.countdown += 1;\n          }\n          $scope.startTime = moment().diff((moment($scope.stoppedTime).diff(moment($scope.startTime))));\n          tick();\n          $scope.isRunning = true;\n          $scope.$emit('timer-started', {\n            timeoutId: $scope.timeoutId,\n            millis: $scope.millis,\n            seconds: $scope.seconds,\n            minutes: $scope.minutes,\n            hours: $scope.hours,\n            days: $scope.days\n          });\n        };\n\n        $scope.stop = $scope.pause = function () {\n          var timeoutId = $scope.timeoutId;\n          $scope.clear();\n          $scope.$emit('timer-stopped', {\n            timeoutId: timeoutId,\n            millis: $scope.millis,\n            seconds: $scope.seconds,\n            minutes: $scope.minutes,\n            hours: $scope.hours,\n            days: $scope.days\n          });\n        };\n\n        $scope.clear = function () {\n          // same as stop but without the event being triggered\n          $scope.stoppedTime = moment();\n          resetTimeout();\n          $scope.timeoutId = null;\n          $scope.isRunning = false;\n        };\n\n        $scope.reset = function () {\n          $scope.startTime = $scope.startTimeAttr ? moment($scope.startTimeAttr) : moment();\n          $scope.endTime = $scope.endTimeAttr ? moment($scope.endTimeAttr) : null;\n          $scope.countdown = angular.isNumber($scope.countdownattr) && parseInt($scope.countdownattr, 10) > 0 ? parseInt($scope.countdownattr, 10) : undefined;\n          resetTimeout();\n          tick();\n          $scope.isRunning = false;\n          $scope.clear();\n          $scope.$emit('timer-reset', {\n            timeoutId: timeoutId,\n            millis: $scope.millis,\n            seconds: $scope.seconds,\n            minutes: $scope.minutes,\n            hours: $scope.hours,\n            days: $scope.days\n          });\n        };\n\n        $element.bind('$destroy', function () {\n          resetTimeout();\n          $scope.isRunning = false;\n        });\n\n\n        function calculateTimeUnits() {\n          var timeUnits = {}; //will contains time with units\n\n          if ($attrs.startTime !== undefined){\n            $scope.millis = moment().diff(moment($scope.startTimeAttr));\n          }\n\n          timeUnits = i18nService.getTimeUnits($scope.millis);\n\n          // compute time values based on maxTimeUnit specification\n          if (!$scope.maxTimeUnit || $scope.maxTimeUnit === 'day') {\n            $scope.seconds = Math.floor(($scope.millis / 1000) % 60);\n            $scope.minutes = Math.floor((($scope.millis / (60000)) % 60));\n            $scope.hours = Math.floor((($scope.millis / (3600000)) % 24));\n            $scope.days = Math.floor((($scope.millis / (3600000)) / 24));\n            $scope.months = 0;\n            $scope.years = 0;\n          } else if ($scope.maxTimeUnit === 'second') {\n            $scope.seconds = Math.floor($scope.millis / 1000);\n            $scope.minutes = 0;\n            $scope.hours = 0;\n            $scope.days = 0;\n            $scope.months = 0;\n            $scope.years = 0;\n          } else if ($scope.maxTimeUnit === 'minute') {\n            $scope.seconds = Math.floor(($scope.millis / 1000) % 60);\n            $scope.minutes = Math.floor($scope.millis / 60000);\n            $scope.hours = 0;\n            $scope.days = 0;\n            $scope.months = 0;\n            $scope.years = 0;\n          } else if ($scope.maxTimeUnit === 'hour') {\n            $scope.seconds = Math.floor(($scope.millis / 1000) % 60);\n            $scope.minutes = Math.floor((($scope.millis / (60000)) % 60));\n            $scope.hours = Math.floor($scope.millis / 3600000);\n            $scope.days = 0;\n            $scope.months = 0;\n            $scope.years = 0;\n          } else if ($scope.maxTimeUnit === 'month') {\n            $scope.seconds = Math.floor(($scope.millis / 1000) % 60);\n            $scope.minutes = Math.floor((($scope.millis / (60000)) % 60));\n            $scope.hours = Math.floor((($scope.millis / (3600000)) % 24));\n            $scope.days = Math.floor((($scope.millis / (3600000)) / 24) % 30);\n            $scope.months = Math.floor((($scope.millis / (3600000)) / 24) / 30);\n            $scope.years = 0;\n          } else if ($scope.maxTimeUnit === 'year') {\n            $scope.seconds = Math.floor(($scope.millis / 1000) % 60);\n            $scope.minutes = Math.floor((($scope.millis / (60000)) % 60));\n            $scope.hours = Math.floor((($scope.millis / (3600000)) % 24));\n            $scope.days = Math.floor((($scope.millis / (3600000)) / 24) % 30);\n            $scope.months = Math.floor((($scope.millis / (3600000)) / 24 / 30) % 12);\n            $scope.years = Math.floor(($scope.millis / (3600000)) / 24 / 365);\n          }\n          // plural - singular unit decision (old syntax, for backwards compatibility and English only, could be deprecated!)\n          $scope.secondsS = ($scope.seconds === 1) ? '' : 's';\n          $scope.minutesS = ($scope.minutes === 1) ? '' : 's';\n          $scope.hoursS = ($scope.hours === 1) ? '' : 's';\n          $scope.daysS = ($scope.days === 1)? '' : 's';\n          $scope.monthsS = ($scope.months === 1)? '' : 's';\n          $scope.yearsS = ($scope.years === 1)? '' : 's';\n\n\n          // new plural-singular unit decision functions (for custom units and multilingual support)\n          $scope.secondUnit = timeUnits.seconds;\n          $scope.minuteUnit = timeUnits.minutes;\n          $scope.hourUnit = timeUnits.hours;\n          $scope.dayUnit = timeUnits.days;\n          $scope.monthUnit = timeUnits.months;\n          $scope.yearUnit = timeUnits.years;\n\n          //add leading zero if number is smaller than 10\n          $scope.sseconds = $scope.seconds < 10 ? '0' + $scope.seconds : $scope.seconds;\n          $scope.mminutes = $scope.minutes < 10 ? '0' + $scope.minutes : $scope.minutes;\n          $scope.hhours = $scope.hours < 10 ? '0' + $scope.hours : $scope.hours;\n          $scope.ddays = $scope.days < 10 ? '0' + $scope.days : $scope.days;\n          $scope.mmonths = $scope.months < 10 ? '0' + $scope.months : $scope.months;\n          $scope.yyears = $scope.years < 10 ? '0' + $scope.years : $scope.years;\n\n        }\n\n        //determine initial values of time units and add AddSeconds functionality\n        if ($scope.countdownattr) {\n          $scope.millis = $scope.countdownattr * 1000;\n\n          $scope.addCDSeconds = function (extraSeconds) {\n            $scope.countdown += extraSeconds;\n            if (!$scope.isRunning) {\n              $scope.start();\n            }\n          };\n\n          $scope.$on('timer-add-cd-seconds', function (e, extraSeconds) {\n             $scope.addCDSeconds(extraSeconds);\n          });\n\n          $scope.$on('timer-set-countdown-seconds', function (e, countdownSeconds) {\n            if (!$scope.isRunning) {\n              $scope.clear();\n            }\n\n            $scope.countdown = countdownSeconds;\n            $scope.millis = countdownSeconds * 1000;\n            calculateTimeUnits();\n          });\n        } else {\n          $scope.millis = 0;\n        }\n        calculateTimeUnits();\n\n        var tick = function tick() {\n          var typeTimer = null; // countdown or endTimeAttr\n          $scope.millis = moment().diff($scope.startTime);\n          var adjustment = $scope.millis % 1000;\n\n          if ($scope.endTimeAttr) {\n            typeTimer = $scope.endTimeAttr;\n            $scope.millis = moment($scope.endTime).diff(moment());\n            adjustment = $scope.interval - $scope.millis % 1000;\n          }\n\n          if ($scope.countdownattr) {\n            typeTimer = $scope.countdownattr;\n            $scope.millis = $scope.countdown * 1000;\n          }\n\n          if ($scope.millis < 0) {\n            $scope.stop();\n            $scope.millis = 0;\n            calculateTimeUnits();\n            if($scope.finishCallback) {\n              $scope.$eval($scope.finishCallback);\n            }\n            return;\n          }\n          calculateTimeUnits();\n\n          //We are not using $timeout for a reason. Please read here - https://github.com/siddii/angular-timer/pull/5\n          $scope.timeoutId = setTimeout(function () {\n              tick();\n              // since you choose not to use $timeout, at least preserve angular cycle two way data binding\n              // by calling $scope.$apply() instead of $scope.$digest()\n              $scope.$apply();\n          }, $scope.interval - adjustment);\n\n          $scope.$emit('timer-tick', {\n            timeoutId: $scope.timeoutId,\n            millis: $scope.millis,\n            seconds: $scope.seconds,\n            minutes: $scope.minutes,\n            hours: $scope.hours,\n            days: $scope.days\n          });\n\n          if ($scope.countdown > 0) {\n            $scope.countdown--;\n          }\n          else if ($scope.countdown <= 0) {\n            $scope.stop();\n            if($scope.finishCallback) {\n              $scope.$eval($scope.finishCallback);\n            }\n          }\n\n          if(typeTimer !== null){\n            //calculate progress bar\n            $scope.progressBar = progressBarService.calculateProgressBar($scope.startTime, $scope.millis, $scope.endTime, $scope.countdownattr);\n\n            if($scope.progressBar === 100){\n              $scope.displayProgressActive = ''; //No more Bootstrap active effect\n            }\n          }\n        };\n\n        if ($scope.autoStart === undefined || $scope.autoStart === true) {\n          $scope.start();\n        }\n      }]\n    };\n  }])\n  .directive('timerControls', function() {\n    return {\n      restrict: 'EA',\n      scope: true,\n      controller: ['$scope', function($scope) {\n        $scope.timerStatus = \"reset\";\n        $scope.$on('timer-started', function() {\n          $scope.timerStatus = \"started\";\n        });\n        $scope.$on('timer-stopped', function() {\n          $scope.timerStatus = \"stopped\";\n        });\n        $scope.$on('timer-reset', function() {\n          $scope.timerStatus = \"reset\";\n        });\n        $scope.timerStart = function() {\n          $scope.$broadcast('timer-start');\n        };\n        $scope.timerStop = function() {\n          $scope.$broadcast('timer-stop');\n        };\n        $scope.timerResume = function() {\n          $scope.$broadcast('timer-resume');\n        };\n        $scope.timerToggle = function() {\n          switch ($scope.timerStatus) {\n            case \"started\":\n              $scope.timerStop();\n              break;\n            case \"stopped\":\n              $scope.timerResume();\n              break;\n            case \"reset\":\n              $scope.timerStart();\n              break;\n          }\n        };\n        $scope.timerAddCDSeconds = function(extraSeconds) {\n          $scope.$broadcast('timer-add-cd-seconds', extraSeconds);\n        };\n      }]\n    };\n  });\n\n/* commonjs package manager support (eg componentjs) */\nif (typeof module !== \"undefined\" && typeof exports !== \"undefined\" && module.exports === exports){\n  module.exports = timerModule;\n}\n\nvar app = angular.module('timer');\n\napp.factory('I18nService', function() {\n\n    var I18nService = function() {};\n\n    I18nService.prototype.language = 'en';\n    I18nService.prototype.fallback = 'en';\n    I18nService.prototype.timeHumanizer = {};\n\n    I18nService.prototype.init = function init(lang, fallback) {\n        var supported_languages = humanizeDuration.getSupportedLanguages();\n\n        this.fallback = (fallback !== undefined) ? fallback : 'en';\n        if (supported_languages.indexOf(fallback) === -1) {\n            this.fallback = 'en';\n        }\n\n        this.language = lang;\n        if (supported_languages.indexOf(lang) === -1) {\n            this.language = this.fallback;\n        }\n\n        // It should be handle by the user's application itself, and not inside the directive\n        // moment init\n        // moment.locale(this.language);\n\n        //human duration init, using it because momentjs does not allow accurate time (\n        // momentJS: a few moment ago, human duration : 4 seconds ago\n        this.timeHumanizer = humanizeDuration.humanizer({\n            language: this.language,\n            halfUnit:false\n        });\n    };\n\n    /**\n     * get time with units from momentJS i18n\n     * @param {int} millis\n     * @returns {{millis: string, seconds: string, minutes: string, hours: string, days: string, months: string, years: string}}\n     */\n    I18nService.prototype.getTimeUnits = function getTimeUnits(millis) {\n        var diffFromAlarm = Math.round(millis/1000) * 1000; //time in milliseconds, get rid of the last 3 ms value to avoid 2.12 seconds display\n\n        var time = {};\n\n        if (typeof this.timeHumanizer != 'undefined'){\n            time = {\n                'millis' : this.timeHumanizer(diffFromAlarm, { units: [\"ms\"] }),\n                'seconds' : this.timeHumanizer(diffFromAlarm, { units: [\"s\"] }),\n                'minutes' : this.timeHumanizer(diffFromAlarm, { units: [\"m\", \"s\"] }) ,\n                'hours' : this.timeHumanizer(diffFromAlarm, { units: [\"h\", \"m\", \"s\"] }) ,\n                'days' : this.timeHumanizer(diffFromAlarm, { units: [\"d\", \"h\", \"m\", \"s\"] }) ,\n                'months' : this.timeHumanizer(diffFromAlarm, { units: [\"mo\", \"d\", \"h\", \"m\", \"s\"] }) ,\n                'years' : this.timeHumanizer(diffFromAlarm, { units: [\"y\", \"mo\", \"d\", \"h\", \"m\", \"s\"] })\n            };\n        }\n        else {\n            console.error('i18nService has not been initialized. You must call i18nService.init(\"en\") for example');\n        }\n\n        return time;\n    };\n\n    return I18nService;\n});\n\nvar app = angular.module('timer');\n\napp.factory('progressBarService', function() {\n\n  var ProgressBarService = function() {};\n\n  /**\n   * calculate the remaining time in a progress bar in percentage\n   * @param {momentjs} startValue in seconds\n   * @param {integer} currentCountdown, where are we in the countdown\n   * @param {integer} remainingTime, remaining milliseconds\n   * @param {integer} endTime, end time, can be undefined\n   * @param {integer} coutdown, original coutdown value, can be undefined\n   *\n   * joke : https://www.youtube.com/watch?v=gENVB6tjq_M\n   * @return {float} 0 --> 100\n   */\n  ProgressBarService.prototype.calculateProgressBar = function calculateProgressBar(startValue, remainingTime, endTimeAttr, coutdown) {\n    var displayProgressBar = 0,\n      endTimeValue,\n      initialCountdown;\n\n    remainingTime = remainingTime / 1000; //seconds\n\n\n    if(endTimeAttr !== null){\n      endTimeValue = moment(endTimeAttr);\n      initialCountdown = endTimeValue.diff(startValue, 'seconds');\n      displayProgressBar = remainingTime * 100 / initialCountdown;\n    }\n    else {\n      displayProgressBar = remainingTime * 100 / coutdown;\n    }\n\n    displayProgressBar = 100 - displayProgressBar; //To have 0 to 100 and not 100 to 0\n    displayProgressBar = Math.round(displayProgressBar * 10) / 10; //learn more why : http://stackoverflow.com/questions/588004/is-floating-point-math-broken\n\n    if(displayProgressBar > 100){ //security\n      displayProgressBar = 100;\n    }\n\n    return displayProgressBar;\n  };\n\n  return new ProgressBarService();\n});\n","/home/travis/build/npmtest/node-npmtest-angular-timer/node_modules/angular-timer/Gruntfile.js":"module.exports = function (grunt) {\n\n  grunt.loadNpmTasks('grunt-contrib-clean');\n  grunt.loadNpmTasks('grunt-contrib-copy');\n  grunt.loadNpmTasks('grunt-contrib-jshint');\n  grunt.loadNpmTasks('grunt-contrib-concat');\n  grunt.loadNpmTasks('grunt-contrib-watch');\n  grunt.loadNpmTasks('grunt-contrib-uglify');\n  grunt.loadNpmTasks('grunt-karma');\n  grunt.loadNpmTasks('grunt-contrib-connect');\n  grunt.loadNpmTasks('grunt-gh-pages');\n\n  var userConfig = {\n    dist_dir: 'dist',\n\n    app_files: {\n      js: [ 'app/**/*.js', '!app/**/*.spec.js' ]\n    }\n  };\n\n  var taskConfig = {\n    pkg: grunt.file.readJSON(\"package.json\"),\n\n    meta: {\n      banner: '/**\\n' +\n        ' * <%= pkg.name %> - v<%= pkg.version %> - <%= grunt.template.today(\"yyyy-mm-dd h:MM TT\") %>\\n' +\n        ' * <%= pkg.homepage %>\\n' +\n        ' *\\n' +\n        ' * Copyright (c) <%= grunt.template.today(\"yyyy\") %> <%= pkg.author %>\\n' +\n        ' * Licensed <%= pkg.licenses.type %> <<%= pkg.licenses.url %>>\\n' +\n        ' */\\n'\n    },\n\n    /**\n     * The directories to delete when `grunt clean` is executed.\n     */\n    clean: [\n      '<%= dist_dir %>'\n    ],\n\n    /* Copy all example into dist/examples */\n    copy: {\n      examples: {\n        src: 'examples/*',\n        dest: 'dist/'\n      },\n      nav: {\n        src: 'navbar.html',\n        dest: 'dist/'\n      },\n      example: {\n        src: 'examples.html',\n        dest: 'dist/'\n      }\n    },\n\n    concat: {\n      compile_js: {\n        options: {\n          banner: '<%= meta.banner %>'\n        },\n        src: [\n           'app/**/*.js'\n        ],\n        dest: '<%= dist_dir %>/<%= pkg.name %>.js'\n      },\n      compile_all_js: {\n        src: [\n          '<%= dist_dir %>/<%= pkg.name %>.min.js',\n           'bower_components/moment/min/moment-with-locales.min.js',\n           'bower_components/humanize-duration/humanize-duration.js'\n      ],\n        dest: '<%= dist_dir %>/assets/js/<%= pkg.name %>-all.min.js'\n      },\n      compile_bower_js: {\n        src: [\n          'bower_components/angular/angular.min.js',\n          'bower_components/jquery/jquery.min.js',\n          'bower_components/bootstrap/docs/assets/js/bootstrap.min.js',\n          'docs/docs.js',\n          'docs/prettify.js',\n          'docs/application.js'\n      ],\n        dest: '<%= dist_dir %>/assets/js/<%= pkg.name %>-bower.js'\n      },\n      compile_bower_css: {\n        src: [\n          'bower_components/bootstrap/docs/assets/css/bootstrap.css',\n          'bower_components/bootstrap/docs/assets/css/bootstrap-responsive.css',\n          'docs/css/docs.css',\n          'docs/css/prettify.css'\n      ],\n        dest: '<%= dist_dir %>/assets/css/<%= pkg.name %>-bower.css'\n      }\n    },\n\n    uglify: {\n      options: {\n        banner: '<%= meta.banner %>'\n      },\n      files: {\n        src: ['<%= concat.compile_js.dest %>'],\n        dest: '<%= dist_dir %>/<%= pkg.name %>.min.js'\n      }\n    },\n\n    jshint: {\n      src: [\n        '<%= app_files.js %>'\n      ],\n      gruntfile: [\n        'Gruntfile.js'\n      ],\n      options: {\n        curly: true,\n        immed: true,\n        newcap: true,\n        noarg: true,\n        sub: true,\n        boss: true,\n        eqnull: true\n      }\n    },\n\n    'gh-pages': {\n      options: {\n        base: 'dist',\n        message: 'Update gh-pages'\n      },\n      src: ['**']\n    },\n\n    connect: {\n      server: {\n        options: {\n          port: 3030,\n          base: '.',\n          keepalive: false,\n          livereload:true,\n          open: true\n        }\n      },\n      testserver: {\n        options: {\n          port: 3030,\n          base: '.'\n        }\n      }\n    },\n\n    karma: {\n      unit: {\n        configFile: 'config/karma.conf.js',\n        singleRun: true,\n        browsers: ['PhantomJS']\n      },\n      e2e: {\n        configFile: 'config/karma-e2e.conf.js',\n        singleRun: true,\n        browsers: ['PhantomJS']\n      }\n    },\n\n    watch: {\n      scripts: {\n        files: ['Gruntfile.js', '*.json', 'app/**/*.js','*.html'],\n        tasks: ['build'],\n        options: {\n          livereload: true\n        }\n      }\n    }\n  };\n\n  grunt.initConfig(grunt.util._.extend(taskConfig, userConfig));\n\n  grunt.registerTask('default', [ 'connect:server', 'watch']);\n\n  grunt.registerTask('tests', [ 'connect:testserver', 'build', 'karma:unit', 'karma:e2e']);\n\n  grunt.registerTask('build', [\n    'clean', 'jshint', 'concat:compile_js', 'uglify', 'concat:compile_all_js', 'concat:compile_bower_js', 'concat:compile_bower_css','copy:examples','copy:nav','copy:example'\n  ]);\n\n  /**\n   * A utility function to get all app JavaScript sources.\n   */\n  function filterForJS ( files ) {\n    return files.filter( function ( file ) {\n      return file.match( /\\.js$/ );\n    });\n  }\n\n  /**\n   * A utility function to get all app CSS sources.\n   */\n  function filterForCSS ( files ) {\n    return files.filter( function ( file ) {\n      return file.match( /\\.css$/ );\n    });\n  }\n\n  /**\n   * The index.html template includes the stylesheet and javascript sources\n   * based on dynamic names calculated in this Gruntfile. This task assembles\n   * the list into variables for the template to use and then runs the\n   * compilation.\n   */\n  grunt.registerMultiTask( 'index', 'Process index.html template', function () {\n    var dirRE = new RegExp( '^('+grunt.config('build_dir')+'|'+grunt.config('dist_dir')+')\\/', 'g' );\n    var jsFiles = filterForJS( this.filesSrc ).map( function ( file ) {\n      return file.replace( dirRE, '' );\n    });\n    var cssFiles = filterForCSS( this.filesSrc ).map( function ( file ) {\n      return file.replace( dirRE, '' );\n    });\n\n    grunt.file.copy('index.tpl.html', this.data.dir + 'index.html', {\n      process: function ( contents, path ) {\n        return grunt.template.process( contents, {\n          data: {\n            scripts: jsFiles,\n            styles: cssFiles,\n            version: grunt.config( 'pkg.version' )\n          }\n        });\n      }\n    });\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-angular-timer/node_modules/angular-timer/config/karma.conf.js":"module.exports = function(config){\n  config.set({\n\n\n    basePath : '../',\n\n    files : [\n      'bower_components/humanize-duration/humanize-duration.js',\n      'bower_components/moment/min/moment-with-locales.js',\n      'bower_components/angular/angular.js',\n      'bower_components/angular-mocks/angular-mocks.js',\n      'app/js/*.js',\n      'test/unit/**/*.js'\n    ],\n\n    exclude : [\n      'bower_components/angular-scenario/angular-scenario.js'\n    ],\n\n    autoWatch : false,\n\n    browsers : ['Chrome'],\n\n    frameworks: ['jasmine'],\n\n    singleRun : true,\n\n    proxies : {\n      '/': 'http://localhost:3030/'\n    },\n\n    plugins : [\n      'karma-chrome-launcher',\n      'karma-firefox-launcher',\n      'karma-jasmine',\n      'karma-phantomjs-launcher',\n      'karma-ng-scenario'\n    ],\n\n    junitReporter : {\n      outputFile: 'test_out/e2e.xml',\n      suite: 'e2e'\n    }\n\n  })\n};\n","/home/travis/build/npmtest/node-npmtest-angular-timer/node_modules/angular-timer/config/karma-e2e.conf.js":"module.exports = function(config){\n  config.set({\n\n\n    basePath : '../',\n\n    files : [\n      'test/e2e/**/*.js'\n    ],\n\n    autoWatch : false,\n\n    browsers : ['Chrome'],\n\n    frameworks: ['ng-scenario'],\n\n    singleRun : true,\n\n    proxies : {\n      '/': 'http://localhost:3030/'\n    },\n\n    plugins : [\n      'karma-chrome-launcher',\n      'karma-firefox-launcher',\n      'karma-jasmine',\n      'karma-phantomjs-launcher',\n      'karma-ng-scenario'\n    ],\n\n    junitReporter : {\n      outputFile: 'test_out/e2e.xml',\n      suite: 'e2e'\n    }\n\n  })\n};\n","/home/travis/build/npmtest/node-npmtest-angular-timer/node_modules/angular-timer/app/js/i18nService.js":"var app = angular.module('timer');\n\napp.factory('I18nService', function() {\n\n    var I18nService = function() {};\n\n    I18nService.prototype.language = 'en';\n    I18nService.prototype.fallback = 'en';\n    I18nService.prototype.timeHumanizer = {};\n\n    I18nService.prototype.init = function init(lang, fallback) {\n        var supported_languages = humanizeDuration.getSupportedLanguages();\n\n        this.fallback = (fallback !== undefined) ? fallback : 'en';\n        if (supported_languages.indexOf(fallback) === -1) {\n            this.fallback = 'en';\n        }\n\n        this.language = lang;\n        if (supported_languages.indexOf(lang) === -1) {\n            this.language = this.fallback;\n        }\n\n        // It should be handle by the user's application itself, and not inside the directive\n        // moment init\n        // moment.locale(this.language);\n\n        //human duration init, using it because momentjs does not allow accurate time (\n        // momentJS: a few moment ago, human duration : 4 seconds ago\n        this.timeHumanizer = humanizeDuration.humanizer({\n            language: this.language,\n            halfUnit:false\n        });\n    };\n\n    /**\n     * get time with units from momentJS i18n\n     * @param {int} millis\n     * @returns {{millis: string, seconds: string, minutes: string, hours: string, days: string, months: string, years: string}}\n     */\n    I18nService.prototype.getTimeUnits = function getTimeUnits(millis) {\n        var diffFromAlarm = Math.round(millis/1000) * 1000; //time in milliseconds, get rid of the last 3 ms value to avoid 2.12 seconds display\n\n        var time = {};\n\n        if (typeof this.timeHumanizer != 'undefined'){\n            time = {\n                'millis' : this.timeHumanizer(diffFromAlarm, { units: [\"ms\"] }),\n                'seconds' : this.timeHumanizer(diffFromAlarm, { units: [\"s\"] }),\n                'minutes' : this.timeHumanizer(diffFromAlarm, { units: [\"m\", \"s\"] }) ,\n                'hours' : this.timeHumanizer(diffFromAlarm, { units: [\"h\", \"m\", \"s\"] }) ,\n                'days' : this.timeHumanizer(diffFromAlarm, { units: [\"d\", \"h\", \"m\", \"s\"] }) ,\n                'months' : this.timeHumanizer(diffFromAlarm, { units: [\"mo\", \"d\", \"h\", \"m\", \"s\"] }) ,\n                'years' : this.timeHumanizer(diffFromAlarm, { units: [\"y\", \"mo\", \"d\", \"h\", \"m\", \"s\"] })\n            };\n        }\n        else {\n            console.error('i18nService has not been initialized. You must call i18nService.init(\"en\") for example');\n        }\n\n        return time;\n    };\n\n    return I18nService;\n});\n","/home/travis/build/npmtest/node-npmtest-angular-timer/node_modules/angular-timer/app/js/progressBarService.js":"var app = angular.module('timer');\n\napp.factory('progressBarService', function() {\n\n  var ProgressBarService = function() {};\n\n  /**\n   * calculate the remaining time in a progress bar in percentage\n   * @param {momentjs} startValue in seconds\n   * @param {integer} currentCountdown, where are we in the countdown\n   * @param {integer} remainingTime, remaining milliseconds\n   * @param {integer} endTime, end time, can be undefined\n   * @param {integer} coutdown, original coutdown value, can be undefined\n   *\n   * joke : https://www.youtube.com/watch?v=gENVB6tjq_M\n   * @return {float} 0 --> 100\n   */\n  ProgressBarService.prototype.calculateProgressBar = function calculateProgressBar(startValue, remainingTime, endTimeAttr, coutdown) {\n    var displayProgressBar = 0,\n      endTimeValue,\n      initialCountdown;\n\n    remainingTime = remainingTime / 1000; //seconds\n\n\n    if(endTimeAttr !== null){\n      endTimeValue = moment(endTimeAttr);\n      initialCountdown = endTimeValue.diff(startValue, 'seconds');\n      displayProgressBar = remainingTime * 100 / initialCountdown;\n    }\n    else {\n      displayProgressBar = remainingTime * 100 / coutdown;\n    }\n\n    displayProgressBar = 100 - displayProgressBar; //To have 0 to 100 and not 100 to 0\n    displayProgressBar = Math.round(displayProgressBar * 10) / 10; //learn more why : http://stackoverflow.com/questions/588004/is-floating-point-math-broken\n\n    if(displayProgressBar > 100){ //security\n      displayProgressBar = 100;\n    }\n\n    return displayProgressBar;\n  };\n\n  return new ProgressBarService();\n});\n","/home/travis/build/npmtest/node-npmtest-angular-timer/node_modules/angular-timer/app/js/_timer.js":"var timerModule = angular.module('timer', [])\n  .directive('timer', ['$compile', function ($compile) {\n    return  {\n      restrict: 'EA',\n      replace: false,\n      scope: {\n        interval: '=interval',\n        startTimeAttr: '=startTime',\n        endTimeAttr: '=endTime',\n        countdownattr: '=countdown',\n        finishCallback: '&finishCallback',\n        autoStart: '&autoStart',\n        language: '@?',\n        fallback: '@?',\n        maxTimeUnit: '=',\n        seconds: '=?',\n        minutes: '=?',\n        hours: '=?',\n        days: '=?',\n        months: '=?',\n        years: '=?',\n        secondsS: '=?',\n        minutesS: '=?',\n        hoursS: '=?',\n        daysS: '=?',\n        monthsS: '=?',\n        yearsS: '=?'\n      },\n      controller: ['$scope', '$element', '$attrs', '$timeout', 'I18nService', '$interpolate', 'progressBarService', function ($scope, $element, $attrs, $timeout, I18nService, $interpolate, progressBarService) {\n\n        // Checking for trim function since IE8 doesn't have it\n        // If not a function, create tirm with RegEx to mimic native trim\n        if (typeof String.prototype.trim !== 'function') {\n          String.prototype.trim = function () {\n            return this.replace(/^\\s+|\\s+$/g, '');\n          };\n        }\n\n        //angular 1.2 doesn't support attributes ending in \"-start\", so we're\n        //supporting both \"autostart\" and \"auto-start\" as a solution for\n        //backward and forward compatibility.\n        $scope.autoStart = $attrs.autoStart || $attrs.autostart;\n\n\n        $scope.language = $scope.language || 'en';\n        $scope.fallback = $scope.fallback || 'en';\n\n        //allow to change the language of the directive while already launched\n        $scope.$watch('language', function(newVal, oldVal) {\n          if(newVal !== undefined) {\n            i18nService.init(newVal, $scope.fallback);\n          }\n        });\n\n        //init momentJS i18n, default english\n        var i18nService = new I18nService();\n        i18nService.init($scope.language, $scope.fallback);\n\n        //progress bar\n        $scope.displayProgressBar = 0;\n        $scope.displayProgressActive = 'active'; //Bootstrap active effect for progress bar\n\n        if ($element.html().trim().length === 0) {\n          $element.append($compile('<span>' + $interpolate.startSymbol() + 'millis' + $interpolate.endSymbol() + '</span>')($scope));\n        } else {\n          $element.append($compile($element.contents())($scope));\n        }\n\n        $scope.startTime = null;\n        $scope.endTime = null;\n        $scope.timeoutId = null;\n        $scope.countdown = angular.isNumber($scope.countdownattr) && parseInt($scope.countdownattr, 10) >= 0 ? parseInt($scope.countdownattr, 10) : undefined;\n        $scope.isRunning = false;\n\n        $scope.$on('timer-start', function () {\n          $scope.start();\n        });\n\n        $scope.$on('timer-resume', function () {\n          $scope.resume();\n        });\n\n        $scope.$on('timer-stop', function () {\n          $scope.stop();\n        });\n\n        $scope.$on('timer-clear', function () {\n          $scope.clear();\n        });\n\n        $scope.$on('timer-reset', function () {\n          $scope.reset();\n        });\n\n        $scope.$on('timer-set-countdown', function (e, countdown) {\n          $scope.countdown = countdown;\n        });\n\n        function resetTimeout() {\n          if ($scope.timeoutId) {\n            clearTimeout($scope.timeoutId);\n          }\n        }\n\n        $scope.$watch('startTimeAttr', function(newValue, oldValue) {\n          if (newValue !== oldValue && $scope.isRunning) {\n            $scope.start();\n          }\n        });\n\n        $scope.$watch('endTimeAttr', function(newValue, oldValue) {\n          if (newValue !== oldValue && $scope.isRunning) {\n            $scope.start();\n          }\n        });\n\n        $scope.start = function () {\n          $scope.startTime = $scope.startTimeAttr ? moment($scope.startTimeAttr) : moment();\n          $scope.endTime = $scope.endTimeAttr ? moment($scope.endTimeAttr) : null;\n          if (!angular.isNumber($scope.countdown)) {\n            $scope.countdown = angular.isNumber($scope.countdownattr) && parseInt($scope.countdownattr, 10) > 0 ? parseInt($scope.countdownattr, 10) : undefined;\n          }\n          resetTimeout();\n          tick();\n          $scope.isRunning = true;\n          $scope.$emit('timer-started', {\n            timeoutId: $scope.timeoutId,\n            millis: $scope.millis,\n            seconds: $scope.seconds,\n            minutes: $scope.minutes,\n            hours: $scope.hours,\n            days: $scope.days\n          });\n        };\n\n        $scope.resume = function () {\n          resetTimeout();\n          if ($scope.countdownattr) {\n            $scope.countdown += 1;\n          }\n          $scope.startTime = moment().diff((moment($scope.stoppedTime).diff(moment($scope.startTime))));\n          tick();\n          $scope.isRunning = true;\n          $scope.$emit('timer-started', {\n            timeoutId: $scope.timeoutId,\n            millis: $scope.millis,\n            seconds: $scope.seconds,\n            minutes: $scope.minutes,\n            hours: $scope.hours,\n            days: $scope.days\n          });\n        };\n\n        $scope.stop = $scope.pause = function () {\n          var timeoutId = $scope.timeoutId;\n          $scope.clear();\n          $scope.$emit('timer-stopped', {\n            timeoutId: timeoutId,\n            millis: $scope.millis,\n            seconds: $scope.seconds,\n            minutes: $scope.minutes,\n            hours: $scope.hours,\n            days: $scope.days\n          });\n        };\n\n        $scope.clear = function () {\n          // same as stop but without the event being triggered\n          $scope.stoppedTime = moment();\n          resetTimeout();\n          $scope.timeoutId = null;\n          $scope.isRunning = false;\n        };\n\n        $scope.reset = function () {\n          $scope.startTime = $scope.startTimeAttr ? moment($scope.startTimeAttr) : moment();\n          $scope.endTime = $scope.endTimeAttr ? moment($scope.endTimeAttr) : null;\n          $scope.countdown = angular.isNumber($scope.countdownattr) && parseInt($scope.countdownattr, 10) > 0 ? parseInt($scope.countdownattr, 10) : undefined;\n          resetTimeout();\n          tick();\n          $scope.isRunning = false;\n          $scope.clear();\n          $scope.$emit('timer-reset', {\n            timeoutId: timeoutId,\n            millis: $scope.millis,\n            seconds: $scope.seconds,\n            minutes: $scope.minutes,\n            hours: $scope.hours,\n            days: $scope.days\n          });\n        };\n\n        $element.bind('$destroy', function () {\n          resetTimeout();\n          $scope.isRunning = false;\n        });\n\n\n        function calculateTimeUnits() {\n          var timeUnits = {}; //will contains time with units\n\n          if ($attrs.startTime !== undefined){\n            $scope.millis = moment().diff(moment($scope.startTimeAttr));\n          }\n\n          timeUnits = i18nService.getTimeUnits($scope.millis);\n\n          // compute time values based on maxTimeUnit specification\n          if (!$scope.maxTimeUnit || $scope.maxTimeUnit === 'day') {\n            $scope.seconds = Math.floor(($scope.millis / 1000) % 60);\n            $scope.minutes = Math.floor((($scope.millis / (60000)) % 60));\n            $scope.hours = Math.floor((($scope.millis / (3600000)) % 24));\n            $scope.days = Math.floor((($scope.millis / (3600000)) / 24));\n            $scope.months = 0;\n            $scope.years = 0;\n          } else if ($scope.maxTimeUnit === 'second') {\n            $scope.seconds = Math.floor($scope.millis / 1000);\n            $scope.minutes = 0;\n            $scope.hours = 0;\n            $scope.days = 0;\n            $scope.months = 0;\n            $scope.years = 0;\n          } else if ($scope.maxTimeUnit === 'minute') {\n            $scope.seconds = Math.floor(($scope.millis / 1000) % 60);\n            $scope.minutes = Math.floor($scope.millis / 60000);\n            $scope.hours = 0;\n            $scope.days = 0;\n            $scope.months = 0;\n            $scope.years = 0;\n          } else if ($scope.maxTimeUnit === 'hour') {\n            $scope.seconds = Math.floor(($scope.millis / 1000) % 60);\n            $scope.minutes = Math.floor((($scope.millis / (60000)) % 60));\n            $scope.hours = Math.floor($scope.millis / 3600000);\n            $scope.days = 0;\n            $scope.months = 0;\n            $scope.years = 0;\n          } else if ($scope.maxTimeUnit === 'month') {\n            $scope.seconds = Math.floor(($scope.millis / 1000) % 60);\n            $scope.minutes = Math.floor((($scope.millis / (60000)) % 60));\n            $scope.hours = Math.floor((($scope.millis / (3600000)) % 24));\n            $scope.days = Math.floor((($scope.millis / (3600000)) / 24) % 30);\n            $scope.months = Math.floor((($scope.millis / (3600000)) / 24) / 30);\n            $scope.years = 0;\n          } else if ($scope.maxTimeUnit === 'year') {\n            $scope.seconds = Math.floor(($scope.millis / 1000) % 60);\n            $scope.minutes = Math.floor((($scope.millis / (60000)) % 60));\n            $scope.hours = Math.floor((($scope.millis / (3600000)) % 24));\n            $scope.days = Math.floor((($scope.millis / (3600000)) / 24) % 30);\n            $scope.months = Math.floor((($scope.millis / (3600000)) / 24 / 30) % 12);\n            $scope.years = Math.floor(($scope.millis / (3600000)) / 24 / 365);\n          }\n          // plural - singular unit decision (old syntax, for backwards compatibility and English only, could be deprecated!)\n          $scope.secondsS = ($scope.seconds === 1) ? '' : 's';\n          $scope.minutesS = ($scope.minutes === 1) ? '' : 's';\n          $scope.hoursS = ($scope.hours === 1) ? '' : 's';\n          $scope.daysS = ($scope.days === 1)? '' : 's';\n          $scope.monthsS = ($scope.months === 1)? '' : 's';\n          $scope.yearsS = ($scope.years === 1)? '' : 's';\n\n\n          // new plural-singular unit decision functions (for custom units and multilingual support)\n          $scope.secondUnit = timeUnits.seconds;\n          $scope.minuteUnit = timeUnits.minutes;\n          $scope.hourUnit = timeUnits.hours;\n          $scope.dayUnit = timeUnits.days;\n          $scope.monthUnit = timeUnits.months;\n          $scope.yearUnit = timeUnits.years;\n\n          //add leading zero if number is smaller than 10\n          $scope.sseconds = $scope.seconds < 10 ? '0' + $scope.seconds : $scope.seconds;\n          $scope.mminutes = $scope.minutes < 10 ? '0' + $scope.minutes : $scope.minutes;\n          $scope.hhours = $scope.hours < 10 ? '0' + $scope.hours : $scope.hours;\n          $scope.ddays = $scope.days < 10 ? '0' + $scope.days : $scope.days;\n          $scope.mmonths = $scope.months < 10 ? '0' + $scope.months : $scope.months;\n          $scope.yyears = $scope.years < 10 ? '0' + $scope.years : $scope.years;\n\n        }\n\n        //determine initial values of time units and add AddSeconds functionality\n        if ($scope.countdownattr) {\n          $scope.millis = $scope.countdownattr * 1000;\n\n          $scope.addCDSeconds = function (extraSeconds) {\n            $scope.countdown += extraSeconds;\n            if (!$scope.isRunning) {\n              $scope.start();\n            }\n          };\n\n          $scope.$on('timer-add-cd-seconds', function (e, extraSeconds) {\n             $scope.addCDSeconds(extraSeconds);\n          });\n\n          $scope.$on('timer-set-countdown-seconds', function (e, countdownSeconds) {\n            if (!$scope.isRunning) {\n              $scope.clear();\n            }\n\n            $scope.countdown = countdownSeconds;\n            $scope.millis = countdownSeconds * 1000;\n            calculateTimeUnits();\n          });\n        } else {\n          $scope.millis = 0;\n        }\n        calculateTimeUnits();\n\n        var tick = function tick() {\n          var typeTimer = null; // countdown or endTimeAttr\n          $scope.millis = moment().diff($scope.startTime);\n          var adjustment = $scope.millis % 1000;\n\n          if ($scope.endTimeAttr) {\n            typeTimer = $scope.endTimeAttr;\n            $scope.millis = moment($scope.endTime).diff(moment());\n            adjustment = $scope.interval - $scope.millis % 1000;\n          }\n\n          if ($scope.countdownattr) {\n            typeTimer = $scope.countdownattr;\n            $scope.millis = $scope.countdown * 1000;\n          }\n\n          if ($scope.millis < 0) {\n            $scope.stop();\n            $scope.millis = 0;\n            calculateTimeUnits();\n            if($scope.finishCallback) {\n              $scope.$eval($scope.finishCallback);\n            }\n            return;\n          }\n          calculateTimeUnits();\n\n          //We are not using $timeout for a reason. Please read here - https://github.com/siddii/angular-timer/pull/5\n          $scope.timeoutId = setTimeout(function () {\n              tick();\n              // since you choose not to use $timeout, at least preserve angular cycle two way data binding\n              // by calling $scope.$apply() instead of $scope.$digest()\n              $scope.$apply();\n          }, $scope.interval - adjustment);\n\n          $scope.$emit('timer-tick', {\n            timeoutId: $scope.timeoutId,\n            millis: $scope.millis,\n            seconds: $scope.seconds,\n            minutes: $scope.minutes,\n            hours: $scope.hours,\n            days: $scope.days\n          });\n\n          if ($scope.countdown > 0) {\n            $scope.countdown--;\n          }\n          else if ($scope.countdown <= 0) {\n            $scope.stop();\n            if($scope.finishCallback) {\n              $scope.$eval($scope.finishCallback);\n            }\n          }\n\n          if(typeTimer !== null){\n            //calculate progress bar\n            $scope.progressBar = progressBarService.calculateProgressBar($scope.startTime, $scope.millis, $scope.endTime, $scope.countdownattr);\n\n            if($scope.progressBar === 100){\n              $scope.displayProgressActive = ''; //No more Bootstrap active effect\n            }\n          }\n        };\n\n        if ($scope.autoStart === undefined || $scope.autoStart === true) {\n          $scope.start();\n        }\n      }]\n    };\n  }])\n  .directive('timerControls', function() {\n    return {\n      restrict: 'EA',\n      scope: true,\n      controller: ['$scope', function($scope) {\n        $scope.timerStatus = \"reset\";\n        $scope.$on('timer-started', function() {\n          $scope.timerStatus = \"started\";\n        });\n        $scope.$on('timer-stopped', function() {\n          $scope.timerStatus = \"stopped\";\n        });\n        $scope.$on('timer-reset', function() {\n          $scope.timerStatus = \"reset\";\n        });\n        $scope.timerStart = function() {\n          $scope.$broadcast('timer-start');\n        };\n        $scope.timerStop = function() {\n          $scope.$broadcast('timer-stop');\n        };\n        $scope.timerResume = function() {\n          $scope.$broadcast('timer-resume');\n        };\n        $scope.timerToggle = function() {\n          switch ($scope.timerStatus) {\n            case \"started\":\n              $scope.timerStop();\n              break;\n            case \"stopped\":\n              $scope.timerResume();\n              break;\n            case \"reset\":\n              $scope.timerStart();\n              break;\n          }\n        };\n        $scope.timerAddCDSeconds = function(extraSeconds) {\n          $scope.$broadcast('timer-add-cd-seconds', extraSeconds);\n        };\n      }]\n    };\n  });\n\n/* commonjs package manager support (eg componentjs) */\nif (typeof module !== \"undefined\" && typeof exports !== \"undefined\" && module.exports === exports){\n  module.exports = timerModule;\n}\n"}